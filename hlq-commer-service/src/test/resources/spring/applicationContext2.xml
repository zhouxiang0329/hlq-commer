<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd     http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
            </list>
        </property>
    </bean>


    <context:component-scan base-package="com.chinaredstar.dubbo"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <bean class="org.mockito.Mockito" factory-method="mock">
        <constructor-arg value="com.chinaredstar.mdm.dao.UserMapper"/>
    </bean>

    <!--redis-->
    <cache:annotation-driven cache-manager="cacheManager"/>

    <bean id="cacheRedisSentinelConfiguration"
          class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                <property name="name" value="mymaster"/>
            </bean>
        </property>
        <property name="sentinels">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${cache.redis.sentinels.host1}"/>
                    <constructor-arg name="port" value="${cache.redis.sentinels.port1}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${cache.redis.sentinels.host2}"/>
                    <constructor-arg name="port" value="${cache.redis.sentinels.port2}"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${cache.redis.sentinels.host3}"/>
                    <constructor-arg name="port" value="${cache.redis.sentinels.port3}"/>
                </bean>
            </set>
        </property>
    </bean>

    <!--database根据自己的业务线来设定-->
    <bean id="cacheJedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:usePool="true" p:database="1">
        <constructor-arg name="sentinelConfig" ref="cacheRedisSentinelConfiguration"/>
    </bean>

    <bean id="cacheRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="cacheJedisConnectionFactory">
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>
    <!--缓存时长根据自己的业务需求来设定-->
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg ref="cacheRedisTemplate"/>
        <property name="defaultExpiration" value="300"/>
    </bean>
</beans>